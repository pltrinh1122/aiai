metadata:
  id: btrfs_data-verification
  intent: BTRFS Data Partition Installation Verification
  technicalProficiency: Intermediate
  context:
    designPrinciples:
    - Verify system state before proceeding
    - Fail fast and safe
    - Provide clear validation feedback
    dependencies:
    - Shell command execution
    - System state validation
    compatibility:
    - Linux systems with shell access
    - Ubuntu/Debian package management
body:
- type: command
  id: phase-mount_verification-start
  intent: 'Starting phase: Verify data partition is properly mounted'
  shellCommand: 'echo ''Starting phase: Verify data partition is properly mounted'''
  destructive: false
  conditional: false
- type: validation
  id: validate-data_mount
  intent: /data partition mounted as BTRFS
  command: mount | grep 'on /data '
  expected_output: btrfs
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-data_mount_point
  intent: /data directory exists and is accessible
  command: test -d /data && test -r /data && echo 'accessible'
  expected_output: accessible
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-data_permissions
  intent: /data directory has correct permissions
  command: ls -ld /data
  expected_output: drwxr-xr-x
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-mount_verification-end
  intent: 'Completed phase: Verify data partition is properly mounted'
  shellCommand: 'echo ''Completed phase: Verify data partition is properly mounted'''
  destructive: false
  conditional: false
- type: command
  id: phase-subvolume_structure-start
  intent: 'Starting phase: Verify data partition subvolume structure'
  shellCommand: 'echo ''Starting phase: Verify data partition subvolume structure'''
  destructive: false
  conditional: false
- type: command
  id: check-data_subvolumes
  intent: List data partition subvolumes
  shellCommand: btrfs subvolume list /data
  destructive: false
  conditional: false
- type: validation
  id: validate-data_snapshots_dir
  intent: Data snapshots directory exists
  command: test -d /data/.snapshots && echo 'exists'
  expected_output: exists
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-data_backups_dir
  intent: Data backups directory exists
  command: test -d /data/backups && echo 'exists'
  expected_output: exists
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-data_archives_dir
  intent: Data archives directory exists
  command: test -d /data/archives && echo 'exists'
  expected_output: exists
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-data_shared_dir
  intent: Data shared directory exists
  command: test -d /data/shared && echo 'exists'
  expected_output: exists
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-subvolume_structure-end
  intent: 'Completed phase: Verify data partition subvolume structure'
  shellCommand: 'echo ''Completed phase: Verify data partition subvolume structure'''
  destructive: false
  conditional: false
- type: command
  id: phase-functionality_testing-start
  intent: 'Starting phase: Test BTRFS functionality for data storage'
  shellCommand: 'echo ''Starting phase: Test BTRFS functionality for data storage'''
  destructive: false
  conditional: false
- type: command
  id: check-data_snapshot_creation
  intent: Create test data snapshot
  shellCommand: btrfs subvolume snapshot /data /data/.snapshots/data-verification-test-$(date
    +%Y%m%d-%H%M)
  destructive: false
  conditional: false
- type: command
  id: check-data_snapshot_cleanup
  intent: Remove test data snapshot
  shellCommand: btrfs subvolume delete /data/.snapshots/data-verification-test-$(date
    +%Y%m%d-%H%M)
  destructive: false
  conditional: false
- type: validation
  id: validate-data_write_test
  intent: Test write performance to data partition
  command: dd if=/dev/zero of=/data/test_write_$(date +%s) bs=1M count=100 2>/dev/null
    && rm /data/test_write_$(date +%s) && echo 'write_test_passed'
  expected_output: write_test_passed
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-data_read_test
  intent: Test read performance from data partition
  command: dd if=/data/test_read_$(date +%s) of=/dev/null bs=1M count=100 2>/dev/null
    && echo 'read_test_passed'
  expected_output: read_test_passed
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-functionality_testing-end
  intent: 'Completed phase: Test BTRFS functionality for data storage'
  shellCommand: 'echo ''Completed phase: Test BTRFS functionality for data storage'''
  destructive: false
  conditional: false
- type: command
  id: phase-performance_analysis-start
  intent: 'Starting phase: Analyze data partition performance'
  shellCommand: 'echo ''Starting phase: Analyze data partition performance'''
  destructive: false
  conditional: false
- type: command
  id: check-data_compression_analysis
  intent: Analyze compression effectiveness for data
  shellCommand: compsize /data
  destructive: false
  conditional: false
- type: command
  id: check-data_filesystem_performance
  intent: Check data filesystem performance
  shellCommand: btrfs filesystem df /data && btrfs filesystem usage /data
  destructive: false
  conditional: false
- type: command
  id: check-data_space_usage
  intent: Data partition space usage
  shellCommand: df -h /data
  destructive: false
  conditional: false
- type: command
  id: phase-performance_analysis-end
  intent: 'Completed phase: Analyze data partition performance'
  shellCommand: 'echo ''Completed phase: Analyze data partition performance'''
  destructive: false
  conditional: false
- type: command
  id: phase-data_optimization-start
  intent: 'Starting phase: Verify data-specific optimizations'
  shellCommand: 'echo ''Starting phase: Verify data-specific optimizations'''
  destructive: false
  conditional: false
- type: command
  id: check-data_compression_settings
  intent: Check compression settings for data workloads
  shellCommand: btrfs property get /data compression
  destructive: false
  conditional: false
- type: validation
  id: validate-data_noatime_mount
  intent: Check if noatime is set for performance
  command: mount | grep 'on /data ' | grep -q noatime && echo 'noatime_set'
  expected_output: noatime_set
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: check-data_ssd_optimization
  intent: Check for SSD optimization settings
  shellCommand: btrfs property get /data ssd
  destructive: false
  conditional: false
- type: command
  id: check-data_quota_enabled
  intent: Check if quotas are enabled for data management
  shellCommand: btrfs qgroup show /data
  destructive: false
  conditional: false
- type: command
  id: phase-data_optimization-end
  intent: 'Completed phase: Verify data-specific optimizations'
  shellCommand: 'echo ''Completed phase: Verify data-specific optimizations'''
  destructive: false
  conditional: false
- type: command
  id: phase-filesystem_integrity-start
  intent: 'Starting phase: Verify data partition integrity'
  shellCommand: 'echo ''Starting phase: Verify data partition integrity'''
  destructive: false
  conditional: false
- type: command
  id: check-data_scrub_start
  intent: Start BTRFS scrub for data partition
  shellCommand: btrfs scrub start /data
  destructive: false
  conditional: false
- type: command
  id: check-data_scrub_status
  intent: Check BTRFS scrub status for data partition
  shellCommand: btrfs scrub status /data
  destructive: false
  conditional: false
- type: command
  id: check-data_filesystem_errors
  intent: Check for data partition filesystem errors
  shellCommand: dmesg | grep -i error | grep -i data | tail -3
  destructive: false
  conditional: false
- type: command
  id: phase-filesystem_integrity-end
  intent: 'Completed phase: Verify data partition integrity'
  shellCommand: 'echo ''Completed phase: Verify data partition integrity'''
  destructive: false
  conditional: false
- type: command
  id: phase-data_environment-start
  intent: 'Starting phase: Verify data environment setup'
  shellCommand: 'echo ''Starting phase: Verify data environment setup'''
  destructive: false
  conditional: false
- type: command
  id: check-data_directory_structure
  intent: Verify data directory structure
  shellCommand: find /data -maxdepth 2 -type d | sort
  destructive: false
  conditional: false
- type: command
  id: check-data_permissions_check
  intent: Check data directory permissions
  shellCommand: ls -la /data/
  destructive: false
  conditional: false
- type: command
  id: check-data_ownership_check
  intent: Check data directory ownership
  shellCommand: ls -ld /data
  destructive: false
  conditional: false
- type: command
  id: phase-data_environment-end
  intent: 'Completed phase: Verify data environment setup'
  shellCommand: 'echo ''Completed phase: Verify data environment setup'''
  destructive: false
  conditional: false
- type: command
  id: phase-backup_verification-start
  intent: 'Starting phase: Verify backup and recovery capabilities'
  shellCommand: 'echo ''Starting phase: Verify backup and recovery capabilities'''
  destructive: false
  conditional: false
- type: validation
  id: validate-backup_directory_exists
  intent: Backup directory exists and is writable
  command: test -d /data/backups && test -w /data/backups && echo 'backup_ready'
  expected_output: backup_ready
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-archive_directory_exists
  intent: Archive directory exists and is writable
  command: test -d /data/archives && test -w /data/archives && echo 'archive_ready'
  expected_output: archive_ready
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-snapshot_backup_test
  intent: Test snapshot backup functionality
  command: btrfs subvolume snapshot /data /data/backups/test_backup_$(date +%Y%m%d-%H%M)
    && echo 'backup_test_passed'
  expected_output: backup_test_passed
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-backup_verification-end
  intent: 'Completed phase: Verify backup and recovery capabilities'
  shellCommand: 'echo ''Completed phase: Verify backup and recovery capabilities'''
  destructive: false
  conditional: false
- type: command
  id: phase-final_assessment-start
  intent: 'Starting phase: Final data partition health assessment'
  shellCommand: 'echo ''Starting phase: Final data partition health assessment'''
  destructive: false
  conditional: false
- type: command
  id: check-data_filesystem_overview
  intent: Display data BTRFS filesystem overview
  shellCommand: btrfs filesystem show /data
  destructive: false
  conditional: false
- type: command
  id: check-data_overall_health
  intent: Overall data partition health
  shellCommand: btrfs filesystem usage /data && df -h /data
  destructive: false
  conditional: false
- type: command
  id: phase-final_assessment-end
  intent: 'Completed phase: Final data partition health assessment'
  shellCommand: 'echo ''Completed phase: Final data partition health assessment'''
  destructive: false
  conditional: false
- type: command
  id: verification-complete
  intent: Verification completed successfully
  shellCommand: echo 'All verification checks completed successfully'
  destructive: false
  conditional: false
