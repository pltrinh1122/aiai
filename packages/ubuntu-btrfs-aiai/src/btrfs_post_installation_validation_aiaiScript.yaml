metadata:
  id: post_installation_validation-verification
  intent: Post-Installation Validation for Ubuntu AI/ML BTRFS Installation
  technicalProficiency: Intermediate
  context:
    designPrinciples:
    - Verify system state before proceeding
    - Fail fast and safe
    - Provide clear validation feedback
    dependencies:
    - Shell command execution
    - System state validation
    compatibility:
    - Linux systems with shell access
    - Ubuntu/Debian package management
body:
- type: command
  id: phase-system_installation_verification-start
  intent: 'Starting phase: Verify Ubuntu installation and system information'
  shellCommand: 'echo ''Starting phase: Verify Ubuntu installation and system information'''
  destructive: false
  conditional: false
- type: validation
  id: validate-ubuntu_version_check
  intent: Verify Ubuntu 24.04 LTS installation
  command: lsb_release -d 2>/dev/null | grep -q 'Ubuntu 24.04' && echo 'ubuntu_24_04_installed'
    || echo 'wrong_version'
  expected_output: ubuntu_24_04_installed
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-kernel_version_info
  intent: Get kernel version information
  shellCommand: uname -r
  destructive: false
  conditional: false
- type: validation
  id: validate-system_release_info
  intent: Get detailed system release information
  command: lsb_release -a
  expected_output: Ubuntu
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: phase-system_installation_verification-end
  intent: 'Completed phase: Verify Ubuntu installation and system information'
  shellCommand: 'echo ''Completed phase: Verify Ubuntu installation and system information'''
  destructive: false
  conditional: false
- type: command
  id: phase-partition_mount_verification-start
  intent: 'Starting phase: Verify all partitions are mounted correctly'
  shellCommand: 'echo ''Starting phase: Verify all partitions are mounted correctly'''
  destructive: false
  conditional: false
- type: validation
  id: validate-efi_boot_mount
  intent: Verify EFI boot partition mounted
  command: mount | grep -q '/boot/efi.*vfat' && echo 'efi_mounted' || echo 'efi_not_mounted'
  expected_output: efi_mounted
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-root_btrfs_mount
  intent: Verify root BTRFS partition mounted
  command: mount | grep -q 'on / .*btrfs' && echo 'root_btrfs_mounted' || echo 'root_btrfs_not_mounted'
  expected_output: root_btrfs_mounted
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-ml_btrfs_mount
  intent: Verify ML BTRFS partition mounted
  command: mount | grep -q 'on /ml .*btrfs' && echo 'ml_btrfs_mounted' || echo 'ml_btrfs_not_mounted'
  expected_output: ml_btrfs_mounted
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-data_ext4_mount
  intent: Verify data EXT4 partition mounted
  command: mount | grep -q 'on /data .*ext4' && echo 'data_ext4_mounted' || echo 'data_ext4_not_mounted'
  expected_output: data_ext4_mounted
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-swap_activation_check
  intent: Verify swap partition is active
  command: swapon --show | grep -q nvme0n1p2 && echo 'swap_active' || echo 'swap_not_active'
  expected_output: swap_active
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-swap_size_info
  intent: Get swap partition size information
  shellCommand: swapon --show --bytes | grep nvme0n1p2 | awk '{print int($3/1024/1024/1024)"GB"}'
    || echo 'swap_size_unknown'
  destructive: false
  conditional: false
- type: command
  id: phase-partition_mount_verification-end
  intent: 'Completed phase: Verify all partitions are mounted correctly'
  shellCommand: 'echo ''Completed phase: Verify all partitions are mounted correctly'''
  destructive: false
  conditional: false
- type: command
  id: phase-filesystem_health_verification-start
  intent: 'Starting phase: Verify BTRFS and EXT4 filesystem health'
  shellCommand: 'echo ''Starting phase: Verify BTRFS and EXT4 filesystem health'''
  destructive: false
  conditional: false
- type: validation
  id: validate-btrfs_filesystem_detection
  intent: Check BTRFS filesystems are accessible
  command: sudo btrfs filesystem show 2>/dev/null | grep -q 'uuid:' && echo 'btrfs_accessible'
    || echo 'btrfs_not_accessible'
  expected_output: btrfs_accessible
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-root_btrfs_health
  intent: Check root BTRFS filesystem health
  command: sudo btrfs filesystem df / >/dev/null 2>&1 && echo 'root_btrfs_healthy'
    || echo 'root_btrfs_issues'
  expected_output: root_btrfs_healthy
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-ml_btrfs_health
  intent: Check ML BTRFS filesystem health
  command: sudo btrfs filesystem df /ml >/dev/null 2>&1 && echo 'ml_btrfs_healthy'
    || echo 'ml_btrfs_issues'
  expected_output: ml_btrfs_healthy
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-ext4_filesystem_health
  intent: Check EXT4 data filesystem health
  command: sudo tune2fs -l /dev/nvme0n1p5 2>/dev/null | grep -q 'Filesystem state.*clean'
    && echo 'ext4_healthy' || echo 'ext4_issues'
  expected_output: (ext4_healthy|ext4_issues)
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-filesystem_health_verification-end
  intent: 'Completed phase: Verify BTRFS and EXT4 filesystem health'
  shellCommand: 'echo ''Completed phase: Verify BTRFS and EXT4 filesystem health'''
  destructive: false
  conditional: false
- type: command
  id: phase-storage_capacity_verification-start
  intent: 'Starting phase: Verify storage capacity and disk usage'
  shellCommand: 'echo ''Starting phase: Verify storage capacity and disk usage'''
  destructive: false
  conditional: false
- type: command
  id: check-partition_space_allocation
  intent: Show partition space allocation
  shellCommand: df -h | grep -E '(Filesystem|nvme0n1)' | grep -v '/boot'
  destructive: false
  conditional: false
- type: command
  id: check-root_usage_check
  intent: Check root partition usage
  shellCommand: df / | tail -1 | awk '{print $5}' | sed 's/%//'
  destructive: false
  conditional: false
- type: command
  id: check-ml_usage_check
  intent: Check ML partition usage
  shellCommand: df /ml | tail -1 | awk '{print $5}' | sed 's/%//'
  destructive: false
  conditional: false
- type: command
  id: check-data_usage_check
  intent: Check data partition usage
  shellCommand: df /data | tail -1 | awk '{print $5}' | sed 's/%//'
  destructive: false
  conditional: false
- type: validation
  id: validate-disk_usage_validation
  intent: Validate disk usage is within expected ranges
  command: ROOT_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//') && ML_USAGE=$(df
    /ml | tail -1 | awk '{print $5}' | sed 's/%//') && DATA_USAGE=$(df /data | tail
    -1 | awk '{print $5}' | sed 's/%//') && if [ $ROOT_USAGE -lt 50 ] && [ $ML_USAGE
    -lt 10 ] && [ $DATA_USAGE -lt 5 ]; then echo 'usage_acceptable'; else echo 'usage_high';
    fi
  expected_output: usage_acceptable
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-storage_capacity_verification-end
  intent: 'Completed phase: Verify storage capacity and disk usage'
  shellCommand: 'echo ''Completed phase: Verify storage capacity and disk usage'''
  destructive: false
  conditional: false
- type: command
  id: phase-boot_system_verification-start
  intent: 'Starting phase: Verify EFI boot system and GRUB configuration'
  shellCommand: 'echo ''Starting phase: Verify EFI boot system and GRUB configuration'''
  destructive: false
  conditional: false
- type: validation
  id: validate-efi_boot_system_check
  intent: Check EFI boot system functionality
  command: efibootmgr -v >/dev/null 2>&1 && echo 'efi_boot_functional' || echo 'efi_boot_not_accessible'
  expected_output: efi_boot_functional
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-ubuntu_boot_entry_check
  intent: Check for Ubuntu boot entry in EFI
  command: efibootmgr | grep -i ubuntu >/dev/null 2>&1 && echo 'ubuntu_boot_entry_present'
    || echo 'ubuntu_boot_entry_missing'
  expected_output: ubuntu_boot_entry_present
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-grub_configuration_check
  intent: Check GRUB configuration file exists
  command: '[ -f /boot/grub/grub.cfg ] && echo ''grub_config_present'' || echo ''grub_config_missing'''
  expected_output: grub_config_present
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-boot_system_verification-end
  intent: 'Completed phase: Verify EFI boot system and GRUB configuration'
  shellCommand: 'echo ''Completed phase: Verify EFI boot system and GRUB configuration'''
  destructive: false
  conditional: false
- type: command
  id: phase-system_resources_verification-start
  intent: 'Starting phase: Verify system memory and CPU resources'
  shellCommand: 'echo ''Starting phase: Verify system memory and CPU resources'''
  destructive: false
  conditional: false
- type: validation
  id: validate-memory_verification
  intent: Check system memory adequacy for AI/ML
  command: TOTAL_RAM_GB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}')
    && if [ $TOTAL_RAM_GB -ge 30 ]; then echo 'memory_adequate'; else echo 'memory_insufficient';
    fi
  expected_output: memory_adequate
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: check-memory_details
  intent: Get detailed memory information
  shellCommand: 'TOTAL_RAM_GB=$(grep MemTotal /proc/meminfo | awk ''{print int($2/1024/1024)}'')
    && echo "System memory: ${TOTAL_RAM_GB}GB"'
  destructive: false
  conditional: false
- type: command
  id: check-cpu_information
  intent: Get CPU information and core count
  shellCommand: 'CPU_CORES=$(nproc) && CPU_MODEL=$(lscpu | grep ''Model name'' | sed
    ''s/Model name: *//'') && echo "CPU: ${CPU_MODEL}, Cores: ${CPU_CORES}"'
  destructive: false
  conditional: false
- type: command
  id: phase-system_resources_verification-end
  intent: 'Completed phase: Verify system memory and CPU resources'
  shellCommand: 'echo ''Completed phase: Verify system memory and CPU resources'''
  destructive: false
  conditional: false
- type: command
  id: phase-hardware_detection_verification-start
  intent: 'Starting phase: Verify hardware detection including GPU and network'
  shellCommand: 'echo ''Starting phase: Verify hardware detection including GPU and
    network'''
  destructive: false
  conditional: false
- type: validation
  id: validate-nvidia_gpu_detection
  intent: Check for NVIDIA GPU detection
  command: 'lspci | grep -i nvidia >/dev/null 2>&1 && lspci | grep -i nvidia | head
    -1 | sed ''s/.*: //'' || echo ''No NVIDIA GPU detected'''
  expected_output: (NVIDIA|No NVIDIA GPU detected)
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-network_interface_check
  intent: Check for active network interfaces
  command: ip link show | grep -q 'state UP' && echo 'network_interface_active' ||
    echo 'no_active_network'
  expected_output: network_interface_active
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-hardware_detection_verification-end
  intent: 'Completed phase: Verify hardware detection including GPU and network'
  shellCommand: 'echo ''Completed phase: Verify hardware detection including GPU and
    network'''
  destructive: false
  conditional: false
- type: command
  id: phase-network_connectivity_verification-start
  intent: 'Starting phase: Verify network connectivity and package repositories'
  shellCommand: 'echo ''Starting phase: Verify network connectivity and package repositories'''
  destructive: false
  conditional: false
- type: validation
  id: validate-internet_connectivity_check
  intent: Check internet connectivity
  command: ping -c 3 8.8.8.8 >/dev/null 2>&1 && echo 'internet_available' || echo
    'no_internet'
  expected_output: internet_available
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: check-package_repository_access
  intent: Check Ubuntu package repository accessibility
  shellCommand: sudo apt update >/dev/null 2>&1 && echo 'repositories_accessible'
    || echo 'repositories_unreachable'
  destructive: false
  conditional: false
- type: command
  id: phase-network_connectivity_verification-end
  intent: 'Completed phase: Verify network connectivity and package repositories'
  shellCommand: 'echo ''Completed phase: Verify network connectivity and package repositories'''
  destructive: false
  conditional: false
- type: command
  id: phase-user_permissions_verification-start
  intent: 'Starting phase: Verify user permissions on AI/ML directories'
  shellCommand: 'echo ''Starting phase: Verify user permissions on AI/ML directories'''
  destructive: false
  conditional: false
- type: validation
  id: validate-ml_directory_permissions
  intent: Check write permissions on /ml directory
  command: '[ -d /ml ] && touch /ml/test-permissions-$$ 2>/dev/null && rm /ml/test-permissions-$$
    2>/dev/null && echo ''ml_writable'' || echo ''ml_not_writable'''
  expected_output: ml_writable
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-data_directory_permissions
  intent: Check write permissions on /data directory
  command: '[ -d /data ] && touch /data/test-permissions-$$ 2>/dev/null && rm /data/test-permissions-$$
    2>/dev/null && echo ''data_writable'' || echo ''data_not_writable'''
  expected_output: data_writable
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-sudo_access_check
  intent: Check sudo access functionality
  command: sudo -n true 2>/dev/null && echo 'sudo_no_password' || (sudo true 2>/dev/null
    && echo 'sudo_with_password') || echo 'sudo_not_available'
  expected_output: (sudo_no_password|sudo_with_password)
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-user_permissions_verification-end
  intent: 'Completed phase: Verify user permissions on AI/ML directories'
  shellCommand: 'echo ''Completed phase: Verify user permissions on AI/ML directories'''
  destructive: false
  conditional: false
- type: command
  id: phase-btrfs_functionality_testing-start
  intent: 'Starting phase: Test BTRFS subvolume and compression functionality'
  shellCommand: 'echo ''Starting phase: Test BTRFS subvolume and compression functionality'''
  destructive: false
  conditional: false
- type: validation
  id: validate-btrfs_subvolume_test
  intent: Test BTRFS subvolume creation capability
  command: sudo btrfs subvolume create /tmp/test-subvolume-$$ >/dev/null 2>&1 && sudo
    btrfs subvolume delete /tmp/test-subvolume-$$ >/dev/null 2>&1 && echo 'subvolume_functional'
    || echo 'subvolume_failed'
  expected_output: subvolume_functional
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-btrfs_compression_test
  intent: Test BTRFS compression functionality
  command: sudo btrfs filesystem defragment -v -czstd /tmp/ >/dev/null 2>&1 && echo
    'compression_functional' || echo 'compression_issues'
  expected_output: (compression_functional|compression_issues)
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-btrfs_functionality_testing-end
  intent: 'Completed phase: Test BTRFS subvolume and compression functionality'
  shellCommand: 'echo ''Completed phase: Test BTRFS subvolume and compression functionality'''
  destructive: false
  conditional: false
- type: command
  id: phase-user_account_verification-start
  intent: 'Starting phase: Verify user account and login functionality'
  shellCommand: 'echo ''Starting phase: Verify user account and login functionality'''
  destructive: false
  conditional: false
- type: command
  id: check-user_account_check
  intent: Verify current user account
  shellCommand: whoami
  destructive: false
  conditional: false
- type: validation
  id: validate-user_home_directory
  intent: Verify user home directory exists and is accessible
  command: '[ -d $HOME ] && echo ''home_directory_accessible'' || echo ''home_directory_missing'''
  expected_output: home_directory_accessible
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-user_shell_access
  intent: Verify shell access and basic command functionality
  command: echo 'shell_test' && pwd && echo 'shell_functional'
  expected_output: shell_functional
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-user_environment_check
  intent: Check user environment variables and PATH
  command: echo 'PATH:' $PATH && echo 'USER:' $USER && echo 'environment_ok'
  expected_output: environment_ok
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-user_account_verification-end
  intent: 'Completed phase: Verify user account and login functionality'
  shellCommand: 'echo ''Completed phase: Verify user account and login functionality'''
  destructive: false
  conditional: false
- type: command
  id: phase-installation_summary-start
  intent: 'Starting phase: Generate installation summary and next steps'
  shellCommand: 'echo ''Starting phase: Generate installation summary and next steps'''
  destructive: false
  conditional: false
- type: command
  id: check-installation_status_check
  intent: Check overall installation status
  shellCommand: echo 'Post-installation validation completed' && echo 'Timestamp:'
    $(date) && echo 'System:' $(lsb_release -d | cut -f2) && echo 'Kernel:' $(uname
    -r)
  destructive: false
  conditional: false
- type: command
  id: check-storage_configuration_summary
  intent: Generate storage configuration summary
  shellCommand: 'echo ''STORAGE CONFIGURATION:'' && echo ''EFI: 1GB (Boot support)''
    && echo ''Swap:'' $(swapon --show --bytes | grep nvme0n1p2 | awk ''{print int($3/1024/1024/1024)"GB"}'')
    ''(Virtual memory)'' && echo ''System: 200GB BTRFS (OS with snapshots)'' && echo
    ''ML: 500GB BTRFS (Experiments with versioning)'' && echo ''Data:'' $(df -h /data
    | tail -1 | awk ''{print $2}'') ''EXT4 (Datasets and archives)'''
  destructive: false
  conditional: false
- type: command
  id: check-next_steps_guidance
  intent: Provide next steps guidance
  shellCommand: "echo 'NEXT STEPS:' && echo '\u2192 Proceed to Section S4: System\
    \ BTRFS Subvolume Setup' && echo '\u2192 Configure advanced snapshot and versioning\
    \ capabilities' && echo '\u2192 Implement AI/ML workflow integration' && echo\
    \ '\u2192 Set up LoRA training environment'"
  destructive: false
  conditional: false
- type: command
  id: phase-installation_summary-end
  intent: 'Completed phase: Generate installation summary and next steps'
  shellCommand: 'echo ''Completed phase: Generate installation summary and next steps'''
  destructive: false
  conditional: false
- type: command
  id: verification-complete
  intent: Verification completed successfully
  shellCommand: echo 'All verification checks completed successfully'
  destructive: false
  conditional: false
