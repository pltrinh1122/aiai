metadata:
  id: btrfs_data_migration-verification
  intent: BTRFS Data Migration for Ubuntu AI/ML Installation
  technicalProficiency: Intermediate
  context:
    designPrinciples:
    - Verify system state before proceeding
    - Fail fast and safe
    - Provide clear validation feedback
    dependencies:
    - Shell command execution
    - System state validation
    compatibility:
    - Linux systems with shell access
    - Ubuntu/Debian package management
body:
- type: command
  id: phase-prerequisite_verification-start
  intent: 'Starting phase: Verify all prerequisites for data migration'
  shellCommand: 'echo ''Starting phase: Verify all prerequisites for data migration'''
  destructive: false
  conditional: false
- type: validation
  id: validate-mount_point_verification
  intent: Verify system BTRFS mount point exists and is mounted
  command: MOUNT_POINT="/mnt/system-btrfs" && [ -d "$MOUNT_POINT" ] && mount | grep
    -q "$MOUNT_POINT" && echo 'mount_point_ready' || echo 'mount_point_not_ready'
  expected_output: mount_point_ready
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-subvolume_availability_check
  intent: Verify all required subvolumes exist
  command: MOUNT_POINT="/mnt/system-btrfs" && REQUIRED_SUBVOLUMES=("@" "@home" "@var-log"
    "@var-cache" "@var-tmp" "@var-spool" "@var-backups" "@snapshots") && MISSING_COUNT=0
    && for subvol in "${REQUIRED_SUBVOLUMES[@]}"; do [ ! -d "$MOUNT_POINT/$subvol"
    ] && MISSING_COUNT=$((MISSING_COUNT + 1)); done && if [ $MISSING_COUNT -eq 0 ];
    then echo 'all_subvolumes_available'; else echo "missing_subvolumes:$MISSING_COUNT";
    fi
  expected_output: all_subvolumes_available
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-disk_space_verification
  intent: Check available disk space for migration
  shellCommand: df -h /mnt/system-btrfs | tail -1 | awk '{print $4}'
  destructive: false
  conditional: false
- type: command
  id: check-rsync_availability_check
  intent: Verify rsync is available for data migration
  shellCommand: which rsync >/dev/null 2>&1 && rsync --version | head -1 || echo 'rsync_not_available'
  destructive: false
  conditional: false
- type: command
  id: phase-prerequisite_verification-end
  intent: 'Completed phase: Verify all prerequisites for data migration'
  shellCommand: 'echo ''Completed phase: Verify all prerequisites for data migration'''
  destructive: false
  conditional: false
- type: command
  id: phase-system_backup_creation-start
  intent: 'Starting phase: Create system backup snapshot before data migration'
  shellCommand: 'echo ''Starting phase: Create system backup snapshot before data
    migration'''
  destructive: false
  conditional: false
- type: validation
  id: validate-backup_snapshot_creation
  intent: Create complete system backup snapshot
  command: MOUNT_POINT="/mnt/system-btrfs" && sudo btrfs subvolume snapshot / "$MOUNT_POINT/original-root-backup"
    && echo 'backup_snapshot_created'
  expected_output: backup_snapshot_created
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-backup_verification
  intent: Verify backup snapshot was created successfully
  command: MOUNT_POINT="/mnt/system-btrfs" && sudo btrfs subvolume list "$MOUNT_POINT"
    | grep original-root-backup && echo 'backup_verified'
  expected_output: backup_verified
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-backup_size_check
  intent: Check backup snapshot size
  shellCommand: MOUNT_POINT="/mnt/system-btrfs" && du -sh "$MOUNT_POINT/original-root-backup"
  destructive: false
  conditional: false
- type: command
  id: phase-system_backup_creation-end
  intent: 'Completed phase: Create system backup snapshot before data migration'
  shellCommand: 'echo ''Completed phase: Create system backup snapshot before data
    migration'''
  destructive: false
  conditional: false
- type: command
  id: phase-system_root_migration-start
  intent: 'Starting phase: Migrate system root data to @ subvolume with selective
    /var exclusion'
  shellCommand: 'echo ''Starting phase: Migrate system root data to @ subvolume with
    selective /var exclusion'''
  destructive: false
  conditional: false
- type: validation
  id: validate-system_data_migration
  intent: Copy system data to @ subvolume (preserving critical /var/lib, excluding
    volatile /var data)
  command: MOUNT_POINT="/mnt/system-btrfs" && sudo rsync -aAXHv --exclude={'/dev/*','/proc/*','/sys/*','/tmp/*','/run/*','/mnt/*','/media/*','/lost+found','/ml/*','/data/*'}
    --exclude={'/var/log/*','/var/cache/*','/var/tmp/*','/var/spool/*','/var/backups/*'}
    / "$MOUNT_POINT/@/" && echo 'system_data_migrated'
  expected_output: system_data_migrated
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-system_migration_verification
  intent: Verify system root migration
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "$MOUNT_POINT/@/usr" ] && [
    -d "$MOUNT_POINT/@/etc" ]; then echo 'system_migration_verified'; else echo 'system_migration_failed';
    fi
  expected_output: system_migration_verified
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-var_lib_preservation_check
  intent: Verify critical /var/lib is preserved in system root
  command: MOUNT_POINT="/mnt/system-btrfs" && [ -d "$MOUNT_POINT/@/var/lib" ] && echo
    'var_lib_preserved' || echo 'var_lib_missing'
  expected_output: var_lib_preserved
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-system_migration_size
  intent: Check system migration size
  shellCommand: MOUNT_POINT="/mnt/system-btrfs" && du -sh "$MOUNT_POINT/@"
  destructive: false
  conditional: false
- type: command
  id: phase-system_root_migration-end
  intent: 'Completed phase: Migrate system root data to @ subvolume with selective
    /var exclusion'
  shellCommand: 'echo ''Completed phase: Migrate system root data to @ subvolume with
    selective /var exclusion'''
  destructive: false
  conditional: false
- type: command
  id: phase-home_directory_migration-start
  intent: 'Starting phase: Migrate home directory data to @home subvolume'
  shellCommand: 'echo ''Starting phase: Migrate home directory data to @home subvolume'''
  destructive: false
  conditional: false
- type: validation
  id: validate-home_data_migration
  intent: Copy home directory data to @home subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && sudo rsync -aAXHv /home/ "$MOUNT_POINT/@home/"
    && echo 'home_data_migrated'
  expected_output: home_data_migrated
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-home_migration_verification
  intent: Verify home directory migration
  command: MOUNT_POINT="/mnt/system-btrfs" && [ -d "$MOUNT_POINT/@home" ] && ls -la
    "$MOUNT_POINT/@home/" | head -5 && echo 'home_migration_verified'
  expected_output: home_migration_verified
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-home_migration_size
  intent: Check home migration size
  shellCommand: MOUNT_POINT="/mnt/system-btrfs" && du -sh "$MOUNT_POINT/@home"
  destructive: false
  conditional: false
- type: command
  id: phase-home_directory_migration-end
  intent: 'Completed phase: Migrate home directory data to @home subvolume'
  shellCommand: 'echo ''Completed phase: Migrate home directory data to @home subvolume'''
  destructive: false
  conditional: false
- type: command
  id: phase-volatile_var_migration-start
  intent: 'Starting phase: Migrate volatile /var data to excluded subvolumes'
  shellCommand: 'echo ''Starting phase: Migrate volatile /var data to excluded subvolumes'''
  destructive: false
  conditional: false
- type: validation
  id: validate-var_log_migration
  intent: Migrate log data to excluded subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "/var/log" ] && [ "$(ls -A /var/log
    2>/dev/null)" ]; then sudo rsync -aAXHv /var/log/ "$MOUNT_POINT/@var-log/" &&
    echo 'var_log_migrated'; else echo 'var_log_skipped_empty'; fi
  expected_output: (var_log_migrated|var_log_skipped_empty)
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-var_cache_migration
  intent: Migrate cache data to excluded subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "/var/cache" ] && [ "$(ls -A
    /var/cache 2>/dev/null)" ]; then sudo rsync -aAXHv /var/cache/ "$MOUNT_POINT/@var-cache/"
    && echo 'var_cache_migrated'; else echo 'var_cache_skipped_empty'; fi
  expected_output: (var_cache_migrated|var_cache_skipped_empty)
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-var_tmp_migration
  intent: Migrate temporary data to excluded subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "/var/tmp" ] && [ "$(ls -A /var/tmp
    2>/dev/null)" ]; then sudo rsync -aAXHv /var/tmp/ "$MOUNT_POINT/@var-tmp/" &&
    echo 'var_tmp_migrated'; else echo 'var_tmp_skipped_empty'; fi
  expected_output: (var_tmp_migrated|var_tmp_skipped_empty)
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-var_spool_migration
  intent: Migrate spool data to excluded subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "/var/spool" ] && [ "$(ls -A
    /var/spool 2>/dev/null)" ]; then sudo rsync -aAXHv /var/spool/ "$MOUNT_POINT/@var-spool/"
    && echo 'var_spool_migrated'; else echo 'var_spool_skipped_empty'; fi
  expected_output: (var_spool_migrated|var_spool_skipped_empty)
  critical: false
  on_fail: skip
  timeout: 30
- type: validation
  id: validate-var_backups_migration
  intent: Migrate backup data to excluded subvolume
  command: MOUNT_POINT="/mnt/system-btrfs" && if [ -d "/var/backups" ] && [ "$(ls
    -A /var/backups 2>/dev/null)" ]; then sudo rsync -aAXHv /var/backups/ "$MOUNT_POINT/@var-backups/"
    && echo 'var_backups_migrated'; else echo 'var_backups_skipped_empty'; fi
  expected_output: (var_backups_migrated|var_backups_skipped_empty)
  critical: false
  on_fail: skip
  timeout: 30
- type: command
  id: phase-volatile_var_migration-end
  intent: 'Completed phase: Migrate volatile /var data to excluded subvolumes'
  shellCommand: 'echo ''Completed phase: Migrate volatile /var data to excluded subvolumes'''
  destructive: false
  conditional: false
- type: command
  id: phase-migration_verification-start
  intent: 'Starting phase: Verify data migration integrity and completeness'
  shellCommand: 'echo ''Starting phase: Verify data migration integrity and completeness'''
  destructive: false
  conditional: false
- type: command
  id: check-volatile_data_summary
  intent: Generate volatile /var data migration summary
  shellCommand: 'MOUNT_POINT="/mnt/system-btrfs" && echo ''Volatile /var data migration
    summary:'' && for subvol in ''@var-log'' ''@var-cache'' ''@var-tmp'' ''@var-spool''
    ''@var-backups''; do if [ -d "$MOUNT_POINT/$subvol" ]; then SIZE=$(du -sh "$MOUNT_POINT/$subvol"
    2>/dev/null | cut -f1); echo "  $subvol: $SIZE"; fi; done'
  destructive: false
  conditional: false
- type: validation
  id: validate-data_integrity_verification
  intent: Verify data integrity of migrated subvolumes
  command: MOUNT_POINT="/mnt/system-btrfs" && echo 'Data integrity verification:'
    && ls -la "$MOUNT_POINT/@/usr" "$MOUNT_POINT/@/etc" "$MOUNT_POINT/@/var/lib" &&
    echo 'System data integrity verified'
  expected_output: System data integrity verified
  critical: true
  on_fail: abort
  timeout: 30
- type: validation
  id: validate-home_data_integrity_verification
  intent: Verify home data integrity
  command: MOUNT_POINT="/mnt/system-btrfs" && ls -la "$MOUNT_POINT/@home/" && echo
    'Home data integrity verified'
  expected_output: Home data integrity verified
  critical: true
  on_fail: abort
  timeout: 30
- type: command
  id: check-total_migration_size
  intent: Check total migrated data size
  shellCommand: 'MOUNT_POINT="/mnt/system-btrfs" && TOTAL_SIZE=$(du -sh "$MOUNT_POINT"
    2>/dev/null | cut -f1) && echo "Total migrated data size: $TOTAL_SIZE"'
  destructive: false
  conditional: false
- type: command
  id: phase-migration_verification-end
  intent: 'Completed phase: Verify data migration integrity and completeness'
  shellCommand: 'echo ''Completed phase: Verify data migration integrity and completeness'''
  destructive: false
  conditional: false
- type: command
  id: phase-migration_summary-start
  intent: 'Starting phase: Generate migration summary and next steps'
  shellCommand: 'echo ''Starting phase: Generate migration summary and next steps'''
  destructive: false
  conditional: false
- type: command
  id: check-migration_completion_summary
  intent: Display migration completion summary
  shellCommand: echo 'DATA MIGRATION COMPLETED SUCCESSFULLY' && echo 'System backup
    snapshot created for recovery' && echo 'System root data migrated to @ subvolume
    (with critical /var/lib preserved)' && echo 'Home directory data migrated to @home
    subvolume' && echo 'Volatile /var data migrated to excluded subvolumes per S1
    strategy' && echo 'Data integrity verification completed'
  destructive: false
  conditional: false
- type: command
  id: check-recovery_information
  intent: Display recovery information
  shellCommand: 'echo ''RECOVERY INFORMATION:'' && echo ''Recovery available: original-root-backup
    snapshot in /mnt/system-btrfs'' && echo ''To restore: sudo btrfs subvolume snapshot
    /mnt/system-btrfs/original-root-backup /mnt/system-btrfs/@'''
  destructive: false
  conditional: false
- type: command
  id: check-next_steps_guidance
  intent: Provide next steps guidance
  shellCommand: 'echo ''READY FOR NEXT STEP: Section 4.6 - Configure System Subvolume
    Mounts'' && echo ''IMPORTANT: Do NOT unmount /mnt/system-btrfs - required for
    configuration steps'''
  destructive: false
  conditional: false
- type: command
  id: phase-migration_summary-end
  intent: 'Completed phase: Generate migration summary and next steps'
  shellCommand: 'echo ''Completed phase: Generate migration summary and next steps'''
  destructive: false
  conditional: false
- type: command
  id: verification-complete
  intent: Verification completed successfully
  shellCommand: echo 'All verification checks completed successfully'
  destructive: false
  conditional: false
