name: aiailint CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aiailint/**'
      - 'devops/build-env/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'aiailint/**'
      - 'devops/build-env/**'

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Quality checks
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-dev.txt

    - name: Run code formatting check
      run: |
        cd aiai/devops/build-env
        ./scripts/quality-check.sh format

    - name: Run linting check
      run: |
        cd aiai/devops/build-env
        ./scripts/quality-check.sh lint

    - name: Run type checking
      run: |
        cd aiai/devops/build-env
        ./scripts/quality-check.sh types

    - name: Run security analysis
      run: |
        cd aiai/devops/build-env
        ./scripts/quality-check.sh security

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-test.txt

    - name: Run unit tests
      run: |
        cd aiai/devops/build-env
        ./scripts/run-tests.sh unit --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: aiai/devops/build-env/coverage.xml
        flags: unit-tests
        name: codecov-umbrella

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-test.txt

    - name: Run integration tests
      run: |
        cd aiai/devops/build-env
        ./scripts/run-tests.sh integration --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: aiai/devops/build-env/coverage.xml
        flags: integration-tests
        name: codecov-umbrella

  # Functional tests
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-test.txt

    - name: Run functional tests
      run: |
        cd aiai/devops/build-env
        ./scripts/run-tests.sh functional --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: aiai/devops/build-env/coverage.xml
        flags: functional-tests
        name: codecov-umbrella

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-test.txt

    - name: Run security tests
      run: |
        cd aiai/devops/build-env
        ./scripts/run-tests.sh security

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: aiai/devops/build-env/bandit-report.json

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, functional-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-dev.txt

    - name: Build package
      run: |
        cd aiai/devops/build-env
        ./scripts/build-package.sh --report --test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: aiailint-package
        path: aiai/aiailint/dist/

    - name: Upload build report
      uses: actions/upload-artifact@v3
      with:
        name: build-report
        path: aiai/devops/build-env/build-reports/

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd aiai/devops/build-env
        pip install -r requirements/requirements-dev.txt

    - name: Build documentation
      run: |
        cd aiai/devops/build-env
        sphinx-build -b html ../../../aiailint/docs/ docs/_build/html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: aiai/devops/build-env/docs/_build/html/

  # Docker build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        context: aiai/devops/build-env
        file: aiai/devops/build-env/docker/Dockerfile
        push: false
        tags: |
          aiailint:latest
          aiailint:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: aiai

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: aiailint-package
        path: dist/

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          ## Changes
          - Automated build and test
          - Quality checks passed
          - All tests passed
          
          ## Artifacts
          - Source distribution
          - Wheel distribution
          - Documentation
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.tar.gz
        asset_name: aiailint-${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.whl
        asset_name: aiailint-${{ github.run_number }}.whl
        asset_content_type: application/zip
