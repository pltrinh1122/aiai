{
  "installation_type": "btrfs_data_migration",
  "version": "1.0",
  "description": "BTRFS Data Migration for Ubuntu AI/ML Installation",
  "author": "Verified Installer Team",
  "created_date": "2023-12-18",
  "prerequisites": {
          "required_viScripts": [
        "btrfs_system_subvolume_creation_viScript.json"
      ],
    "required_mounts": [
      "/mnt/system-btrfs"
    ],
    "required_subvolumes": [
      "@",
      "@home",
      "@var-log",
      "@var-cache",
      "@var-tmp",
      "@var-spool",
      "@var-backups",
      "@snapshots"
    ],
    "warnings": [
      "This operation migrates live system data - ensure system backup exists",
      "Migration involves rsync operations on critical system directories",
      "Verify sufficient disk space before proceeding",
      "System backup snapshot will be created automatically"
    ]
  },
  "phases": [
    {
      "name": "prerequisite_verification",
      "description": "Verify all prerequisites for data migration",
      "checks": [
        {
          "name": "mount_point_verification",
          "description": "Verify system BTRFS mount point exists and is mounted",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && [ -d \"$MOUNT_POINT\" ] && mount | grep -q \"$MOUNT_POINT\" && echo 'mount_point_ready' || echo 'mount_point_not_ready'",
          "expected_pattern": "mount_point_ready",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "subvolume_availability_check",
          "description": "Verify all required subvolumes exist",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && REQUIRED_SUBVOLUMES=(\"@\" \"@home\" \"@var-log\" \"@var-cache\" \"@var-tmp\" \"@var-spool\" \"@var-backups\" \"@snapshots\") && MISSING_COUNT=0 && for subvol in \"${REQUIRED_SUBVOLUMES[@]}\"; do [ ! -d \"$MOUNT_POINT/$subvol\" ] && MISSING_COUNT=$((MISSING_COUNT + 1)); done && if [ $MISSING_COUNT -eq 0 ]; then echo 'all_subvolumes_available'; else echo \"missing_subvolumes:$MISSING_COUNT\"; fi",
          "expected_pattern": "all_subvolumes_available",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "disk_space_verification",
          "description": "Check available disk space for migration",
          "command": "df -h /mnt/system-btrfs | tail -1 | awk '{print $4}'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "rsync_availability_check",
          "description": "Verify rsync is available for data migration",
          "command": "which rsync >/dev/null 2>&1 && rsync --version | head -1 || echo 'rsync_not_available'",
          "expected_pattern": "",
          "severity": "critical",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "system_backup_creation",
      "description": "Create system backup snapshot before data migration",
      "checks": [
        {
          "name": "backup_snapshot_creation",
          "description": "Create complete system backup snapshot",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && sudo btrfs subvolume snapshot / \"$MOUNT_POINT/original-root-backup\" && echo 'backup_snapshot_created'",
          "expected_pattern": "backup_snapshot_created",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "backup_verification",
          "description": "Verify backup snapshot was created successfully",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && sudo btrfs subvolume list \"$MOUNT_POINT\" | grep original-root-backup && echo 'backup_verified'",
          "expected_pattern": "backup_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "backup_size_check",
          "description": "Check backup snapshot size",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && du -sh \"$MOUNT_POINT/original-root-backup\"",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "system_root_migration",
      "description": "Migrate system root data to @ subvolume with selective /var exclusion",
      "checks": [
        {
          "name": "system_data_migration",
          "description": "Copy system data to @ subvolume (preserving critical /var/lib, excluding volatile /var data)",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && sudo rsync -aAXHv --exclude={'/dev/*','/proc/*','/sys/*','/tmp/*','/run/*','/mnt/*','/media/*','/lost+found','/ml/*','/data/*'} --exclude={'/var/log/*','/var/cache/*','/var/tmp/*','/var/spool/*','/var/backups/*'} / \"$MOUNT_POINT/@/\" && echo 'system_data_migrated'",
          "expected_pattern": "system_data_migrated",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "system_migration_verification",
          "description": "Verify system root migration",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"$MOUNT_POINT/@/usr\" ] && [ -d \"$MOUNT_POINT/@/etc\" ]; then echo 'system_migration_verified'; else echo 'system_migration_failed'; fi",
          "expected_pattern": "system_migration_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "var_lib_preservation_check",
          "description": "Verify critical /var/lib is preserved in system root",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && [ -d \"$MOUNT_POINT/@/var/lib\" ] && echo 'var_lib_preserved' || echo 'var_lib_missing'",
          "expected_pattern": "var_lib_preserved",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "system_migration_size",
          "description": "Check system migration size",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && du -sh \"$MOUNT_POINT/@\"",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "home_directory_migration",
      "description": "Migrate home directory data to @home subvolume",
      "checks": [
        {
          "name": "home_data_migration",
          "description": "Copy home directory data to @home subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && sudo rsync -aAXHv /home/ \"$MOUNT_POINT/@home/\" && echo 'home_data_migrated'",
          "expected_pattern": "home_data_migrated",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "home_migration_verification",
          "description": "Verify home directory migration",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && [ -d \"$MOUNT_POINT/@home\" ] && ls -la \"$MOUNT_POINT/@home/\" | head -5 && echo 'home_migration_verified'",
          "expected_pattern": "home_migration_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "home_migration_size",
          "description": "Check home migration size",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && du -sh \"$MOUNT_POINT/@home\"",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "volatile_var_migration",
      "description": "Migrate volatile /var data to excluded subvolumes",
      "checks": [
        {
          "name": "var_log_migration",
          "description": "Migrate log data to excluded subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"/var/log\" ] && [ \"$(ls -A /var/log 2>/dev/null)\" ]; then sudo rsync -aAXHv /var/log/ \"$MOUNT_POINT/@var-log/\" && echo 'var_log_migrated'; else echo 'var_log_skipped_empty'; fi",
          "expected_pattern": "(var_log_migrated|var_log_skipped_empty)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "var_cache_migration",
          "description": "Migrate cache data to excluded subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"/var/cache\" ] && [ \"$(ls -A /var/cache 2>/dev/null)\" ]; then sudo rsync -aAXHv /var/cache/ \"$MOUNT_POINT/@var-cache/\" && echo 'var_cache_migrated'; else echo 'var_cache_skipped_empty'; fi",
          "expected_pattern": "(var_cache_migrated|var_cache_skipped_empty)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "var_tmp_migration",
          "description": "Migrate temporary data to excluded subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"/var/tmp\" ] && [ \"$(ls -A /var/tmp 2>/dev/null)\" ]; then sudo rsync -aAXHv /var/tmp/ \"$MOUNT_POINT/@var-tmp/\" && echo 'var_tmp_migrated'; else echo 'var_tmp_skipped_empty'; fi",
          "expected_pattern": "(var_tmp_migrated|var_tmp_skipped_empty)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "var_spool_migration",
          "description": "Migrate spool data to excluded subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"/var/spool\" ] && [ \"$(ls -A /var/spool 2>/dev/null)\" ]; then sudo rsync -aAXHv /var/spool/ \"$MOUNT_POINT/@var-spool/\" && echo 'var_spool_migrated'; else echo 'var_spool_skipped_empty'; fi",
          "expected_pattern": "(var_spool_migrated|var_spool_skipped_empty)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "var_backups_migration",
          "description": "Migrate backup data to excluded subvolume",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && if [ -d \"/var/backups\" ] && [ \"$(ls -A /var/backups 2>/dev/null)\" ]; then sudo rsync -aAXHv /var/backups/ \"$MOUNT_POINT/@var-backups/\" && echo 'var_backups_migrated'; else echo 'var_backups_skipped_empty'; fi",
          "expected_pattern": "(var_backups_migrated|var_backups_skipped_empty)",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "migration_verification",
      "description": "Verify data migration integrity and completeness",
      "checks": [
        {
          "name": "volatile_data_summary",
          "description": "Generate volatile /var data migration summary",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && echo 'Volatile /var data migration summary:' && for subvol in '@var-log' '@var-cache' '@var-tmp' '@var-spool' '@var-backups'; do if [ -d \"$MOUNT_POINT/$subvol\" ]; then SIZE=$(du -sh \"$MOUNT_POINT/$subvol\" 2>/dev/null | cut -f1); echo \"  $subvol: $SIZE\"; fi; done",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "data_integrity_verification",
          "description": "Verify data integrity of migrated subvolumes",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && echo 'Data integrity verification:' && ls -la \"$MOUNT_POINT/@/usr\" \"$MOUNT_POINT/@/etc\" \"$MOUNT_POINT/@/var/lib\" && echo 'System data integrity verified'",
          "expected_pattern": "System data integrity verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "home_data_integrity_verification",
          "description": "Verify home data integrity",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && ls -la \"$MOUNT_POINT/@home/\" && echo 'Home data integrity verified'",
          "expected_pattern": "Home data integrity verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "total_migration_size",
          "description": "Check total migrated data size",
          "command": "MOUNT_POINT=\"/mnt/system-btrfs\" && TOTAL_SIZE=$(du -sh \"$MOUNT_POINT\" 2>/dev/null | cut -f1) && echo \"Total migrated data size: $TOTAL_SIZE\"",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "migration_summary",
      "description": "Generate migration summary and next steps",
      "checks": [
        {
          "name": "migration_completion_summary",
          "description": "Display migration completion summary",
          "command": "echo 'DATA MIGRATION COMPLETED SUCCESSFULLY' && echo 'System backup snapshot created for recovery' && echo 'System root data migrated to @ subvolume (with critical /var/lib preserved)' && echo 'Home directory data migrated to @home subvolume' && echo 'Volatile /var data migrated to excluded subvolumes per S1 strategy' && echo 'Data integrity verification completed'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "recovery_information",
          "description": "Display recovery information",
          "command": "echo 'RECOVERY INFORMATION:' && echo 'Recovery available: original-root-backup snapshot in /mnt/system-btrfs' && echo 'To restore: sudo btrfs subvolume snapshot /mnt/system-btrfs/original-root-backup /mnt/system-btrfs/@'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "next_steps_guidance",
          "description": "Provide next steps guidance",
          "command": "echo 'READY FOR NEXT STEP: Section 4.6 - Configure System Subvolume Mounts' && echo 'IMPORTANT: Do NOT unmount /mnt/system-btrfs - required for configuration steps'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    }
  ],
  "mount_points": {
    "/mnt/system-btrfs": "btrfs"
  },
  "services": [],
  "filesystems": [
    "btrfs"
  ],
  "test_operations": {
    "backup_snapshot_test": {
      "command": "sudo btrfs subvolume snapshot / /tmp/test-backup-$$",
      "cleanup": "sudo btrfs subvolume delete /tmp/test-backup-$$",
      "description": "Test backup snapshot creation"
    },
    "rsync_test": {
      "command": "rsync -aAXHv --dry-run /etc/ /tmp/test-rsync-$$/",
      "cleanup": "rm -rf /tmp/test-rsync-$$",
      "description": "Test rsync functionality"
    }
  },
  "dependencies": {
    "required_commands": [
      "btrfs",
      "rsync",
      "mount",
      "du",
      "ls",
      "grep",
      "sudo"
    ],
    "optional_commands": [
      "df",
      "wc"
    ]
  },
  "post_verification": {
    "success_message": "BTRFS data migration completed successfully - system data migrated to subvolumes per S1 strategy",
    "failure_message": "BTRFS data migration failed - review issues and check backup snapshot",
    "next_steps": [
      "Section 4.6 - Configure System Subvolume Mounts",
      "Verify all data migrated correctly",
      "Test system functionality",
      "Configure automated backup procedures"
    ]
  }
}