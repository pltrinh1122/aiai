{
  "installation_type": "btrfs_mount_configuration",
  "version": "1.0",
  "description": "BTRFS Mount Configuration for Ubuntu AI/ML Installation",
  "author": "Verified Installer Team",
  "created_date": "2023-12-18",
  "prerequisites": {
    "required_viScripts": [
      "btrfs_system_subvolume_creation_viScript.json",
      "btrfs_data_migration_viScript.json"
    ],
    "required_mounts": [
      "/mnt/system-btrfs"
    ],
    "required_subvolumes": [
      "@",
      "@home",
      "@var-log",
      "@var-cache",
      "@var-tmp",
      "@var-spool",
      "@var-backups",
      "@snapshots"
    ],
    "warnings": [
      "This operation modifies system configuration files",
      "Original fstab will be backed up before modification",
      "Verify all subvolumes exist before proceeding",
      "System will require reboot after configuration"
    ]
  },
  "phases": [
    {
      "name": "filesystem_uuid_retrieval",
      "description": "Retrieve filesystem UUIDs for mount configuration",
      "checks": [
        {
          "name": "system_partition_uuid",
          "description": "Get system BTRFS partition UUID",
          "command": "if [ -b \"/dev/nvme0n1p3\" ]; then SYSTEM_UUID=$(blkid -s UUID -o value /dev/nvme0n1p3) && echo \"system_uuid:$SYSTEM_UUID\"; else echo 'system_partition_not_found'; fi",
          "expected_pattern": "system_uuid:",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "ml_partition_uuid",
          "description": "Get ML BTRFS partition UUID for reference",
          "command": "if [ -b \"/dev/nvme0n1p4\" ]; then ML_UUID=$(blkid -s UUID -o value /dev/nvme0n1p4) && echo \"ml_uuid:$ML_UUID\"; else echo 'ml_partition_not_found'; fi",
          "expected_pattern": "(ml_uuid:|ml_partition_not_found)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "data_partition_uuid",
          "description": "Get data EXT4 partition UUID for reference",
          "command": "if [ -b \"/dev/nvme0n1p5\" ]; then DATA_UUID=$(blkid -s UUID -o value /dev/nvme0n1p5) && echo \"data_uuid:$DATA_UUID\"; else echo 'data_partition_not_found'; fi",
          "expected_pattern": "(data_uuid:|data_partition_not_found)",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "uuid_validation",
          "description": "Validate system UUID is valid and not empty",
          "command": "SYSTEM_UUID=$(blkid -s UUID -o value /dev/nvme0n1p3 2>/dev/null) && if [ -n \"$SYSTEM_UUID\" ]; then echo 'system_uuid_valid'; else echo 'system_uuid_invalid'; fi",
          "expected_pattern": "system_uuid_valid",
          "severity": "critical",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "fstab_backup_creation",
      "description": "Backup current fstab before modification",
      "checks": [
        {
          "name": "fstab_backup_creation",
          "description": "Create backup of current filesystem table",
          "command": "BACKUP_NAME=\"/etc/fstab.backup.$(date +%Y%m%d-%H%M)\" && cp /etc/fstab \"$BACKUP_NAME\" && echo \"backup_created:$BACKUP_NAME\"",
          "expected_pattern": "backup_created:",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "backup_verification",
          "description": "Verify backup file was created successfully",
          "command": "BACKUP_NAME=\"/etc/fstab.backup.$(date +%Y%m%d-%H%M)\" && ls -la \"$BACKUP_NAME\" && echo 'backup_verified'",
          "expected_pattern": "backup_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "backup_content_check",
          "description": "Verify backup contains original fstab content",
          "command": "BACKUP_NAME=\"/etc/fstab.backup.$(date +%Y%m%d-%H%M)\" && wc -l \"$BACKUP_NAME\" && echo 'backup_content_verified'",
          "expected_pattern": "backup_content_verified",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "fstab_update_preparation",
      "description": "Prepare S1-compliant mount entries for fstab",
      "checks": [
        {
          "name": "system_uuid_retrieval_for_config",
          "description": "Retrieve system UUID for mount configuration",
          "command": "SYSTEM_UUID=$(blkid -s UUID -o value /dev/nvme0n1p3) && echo \"System BTRFS UUID: $SYSTEM_UUID\"",
          "expected_pattern": "",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "ml_uuid_retrieval_for_config",
          "description": "Retrieve ML UUID for mount configuration",
          "command": "if [ -b \"/dev/nvme0n1p4\" ]; then ML_UUID=$(blkid -s UUID -o value /dev/nvme0n1p4) && echo \"ML BTRFS UUID: $ML_UUID\"; else echo 'ML partition not found - will be configured in Section S5'; fi",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "data_uuid_retrieval_for_config",
          "description": "Retrieve data UUID for mount configuration",
          "command": "if [ -b \"/dev/nvme0n1p5\" ]; then DATA_UUID=$(blkid -s UUID -o value /dev/nvme0n1p5) && echo \"Data EXT4 UUID: $DATA_UUID\"; else echo 'Data partition not found - will be configured in Section S6'; fi",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "fstab_update_execution",
      "description": "Update fstab with S1-compliant mount entries",
      "checks": [
        {
          "name": "fstab_entries_creation",
          "description": "Create S1-compliant mount entries and append to fstab",
          "command": "SYSTEM_UUID=$(blkid -s UUID -o value /dev/nvme0n1p3) && ML_UUID=$(blkid -s UUID -o value /dev/nvme0n1p4 2>/dev/null) && DATA_UUID=$(blkid -s UUID -o value /dev/nvme0n1p5 2>/dev/null) && FSTAB_ENTRIES=\"\\n# System BTRFS subvolumes (200GB partition) - S1 Strategy Implementation\\n# Core system with preserved /var/lib (included in snapshots)\\nUUID=$SYSTEM_UUID  /            btrfs  subvol=@,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 1\\n\\n# Independent user data snapshots\\nUUID=$SYSTEM_UUID  /home        btrfs  subvol=@home,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\n\\n# Excluded volatile data subvolumes (prevent snapshot pollution)\\nUUID=$SYSTEM_UUID  /var/log     btrfs  subvol=@var-log,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\nUUID=$SYSTEM_UUID  /var/cache   btrfs  subvol=@var-cache,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\nUUID=$SYSTEM_UUID  /var/tmp     btrfs  subvol=@var-tmp,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\nUUID=$SYSTEM_UUID  /var/spool   btrfs  subvol=@var-spool,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\nUUID=$SYSTEM_UUID  /var/backups btrfs  subvol=@var-backups,defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\\n\\n# Snapshot storage (manual mount only)\\nUUID=$SYSTEM_UUID  /.snapshots  btrfs  subvol=@snapshots,defaults,noatime,compress=zstd:3,space_cache=v2,noauto  0 0\" && if [ -n \"$ML_UUID\" ]; then FSTAB_ENTRIES=\"$FSTAB_ENTRIES\\n# ML and Data partitions (configured in subsequent sections)\\nUUID=$ML_UUID      /ml          btrfs  defaults,noatime,compress=zstd:3,space_cache=v2,discard=async  0 2\"; fi && if [ -n \"$DATA_UUID\" ]; then FSTAB_ENTRIES=\"$FSTAB_ENTRIES\\nUUID=$DATA_UUID    /data        ext4   defaults,noatime  0 2\"; fi && echo \"$FSTAB_ENTRIES\" >> /etc/fstab && echo 'fstab_updated'",
          "expected_pattern": "fstab_updated",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "fstab_update_verification",
          "description": "Verify fstab was updated successfully",
          "command": "grep -q 'subvol=@' /etc/fstab && echo 'fstab_update_verified' || echo 'fstab_update_failed'",
          "expected_pattern": "fstab_update_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "fstab_validation",
      "description": "Validate fstab syntax and configuration",
      "checks": [
        {
          "name": "fstab_syntax_validation",
          "description": "Validate fstab syntax using mount -fav",
          "command": "mount -fav && echo 'fstab_syntax_valid' || echo 'fstab_syntax_invalid'",
          "expected_pattern": "fstab_syntax_valid",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "fstab_content_display",
          "description": "Display current fstab contents for verification",
          "command": "echo 'Current fstab contents:' && cat /etc/fstab",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "mount_options_explanation",
      "description": "Display BTRFS mount options explanation",
      "checks": [
        {
          "name": "mount_options_summary",
          "description": "Display BTRFS mount options explanation for AI/ML optimization",
          "command": "echo 'BTRFS Mount Options Explanation (AI/ML Optimized):' && echo 'subvol=@ - Specify subvolume to mount - enables subvolume snapshots' && echo 'noatime - Disable access time updates - improves performance for frequent file access during ML training' && echo 'compress=zstd:3 - Enable ZSTD compression level 3 - saves space on code/config files without impacting performance' && echo 'space_cache=v2 - Enable space cache version 2 - improves filesystem performance for large datasets' && echo 'discard=async - Enable async SSD TRIM - maintains SSD performance over time with frequent writes' && echo 'noauto - Manual mount only (snapshots) - allows manual management'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "configuration_verification",
      "description": "Verify all required mount entries are present in fstab",
      "checks": [
        {
          "name": "required_mount_entries_verification",
          "description": "Check that all required mount entries are present in fstab",
          "command": "REQUIRED_MOUNTS=('/' '/home' '/var/log' '/var/cache' '/var/tmp' '/var/spool' '/var/backups' '/.snapshots') && MISSING_MOUNTS=0 && for mount_point in \"${REQUIRED_MOUNTS[@]}\"; do if grep -q \"subvol=@.*$mount_point\" /etc/fstab; then echo \"VERIFIED: Mount entry for $mount_point found in fstab\"; else echo \"ERROR: Mount entry for $mount_point missing in fstab\"; MISSING_MOUNTS=$((MISSING_MOUNTS + 1)); fi; done && if [ $MISSING_MOUNTS -eq 0 ]; then echo 'all_mount_entries_verified'; else echo \"missing_mount_entries:$MISSING_MOUNTS\"; fi",
          "expected_pattern": "all_mount_entries_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "subvolume_mount_entries_check",
          "description": "Verify specific subvolume mount entries",
          "command": "echo 'Subvolume mount entries verification:' && grep 'subvol=@' /etc/fstab && echo 'subvolume_entries_verified'",
          "expected_pattern": "subvolume_entries_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "snapshot_mount_entry_check",
          "description": "Verify snapshot mount entry with noauto option",
          "command": "grep -q 'subvol=@snapshots.*noauto' /etc/fstab && echo 'snapshot_mount_verified' || echo 'snapshot_mount_missing'",
          "expected_pattern": "snapshot_mount_verified",
          "severity": "critical",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "configuration_summary",
      "description": "Generate configuration summary and next steps",
      "checks": [
        {
          "name": "configuration_completion_summary",
          "description": "Display configuration completion summary",
          "command": "echo 'MOUNT CONFIGURATION COMPLETED SUCCESSFULLY' && echo 'Filesystem UUIDs retrieved successfully' && echo 'Original fstab backed up' && echo 'S1-compliant subvolume mount entries added' && echo 'fstab syntax validation completed' && echo 'All required mount entries verified'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "recovery_information",
          "description": "Display recovery information",
          "command": "BACKUP_NAME=\"/etc/fstab.backup.$(date +%Y%m%d-%H%M)\" && echo 'RECOVERY INFORMATION:' && echo \"Original fstab available at $BACKUP_NAME if rollback needed\" && echo 'To restore: sudo cp $BACKUP_NAME /etc/fstab'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "next_steps_guidance",
          "description": "Provide next steps guidance",
          "command": "echo 'READY FOR NEXT STEP: Section 4.7 - System Boot Configuration Updates' && echo 'IMPORTANT: System will require reboot after configuration' && echo 'After reboot, verify all subvolumes mount correctly'",
          "expected_pattern": "",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    }
  ],
  "mount_points": {
    "/": "btrfs",
    "/home": "btrfs",
    "/var/log": "btrfs",
    "/var/cache": "btrfs",
    "/var/tmp": "btrfs",
    "/var/spool": "btrfs",
    "/var/backups": "btrfs",
    "/.snapshots": "btrfs"
  },
  "services": [],
  "filesystems": [
    "btrfs",
    "ext4"
  ],
  "test_operations": {
    "fstab_backup_test": {
      "command": "cp /etc/fstab /tmp/test-fstab-backup-$$",
      "cleanup": "rm -f /tmp/test-fstab-backup-$$",
      "description": "Test fstab backup creation"
    },
    "mount_validation_test": {
      "command": "mount -fav",
      "cleanup": "",
      "description": "Test fstab syntax validation"
    }
  },
  "dependencies": {
    "required_commands": [
      "blkid",
      "mount",
      "cp",
      "grep",
      "cat",
      "echo",
      "sudo"
    ],
    "optional_commands": [
      "ls",
      "wc"
    ]
  },
  "post_verification": {
    "success_message": "BTRFS mount configuration completed successfully - S1-compliant mount entries added to fstab",
    "failure_message": "BTRFS mount configuration failed - review issues and check backup",
    "next_steps": [
      "Section 4.7 - System Boot Configuration Updates",
      "Reboot system to apply new mount configuration",
      "Verify all subvolumes mount correctly after reboot",
      "Test snapshot functionality"
    ]
  }
}