{
  "installation_type": "docker",
  "version": "1.0",
  "description": "Docker Installation Verification",
  "author": "Verified Installer Team",
  "created_date": "2023-12-18",
  "phases": [
    {
      "name": "service_verification",
      "description": "Verify Docker service is running",
      "checks": [
        {
          "name": "docker_service",
          "description": "Docker service is active",
          "command": "systemctl is-active docker",
          "expected_pattern": "active",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "docker_socket",
          "description": "Docker socket is accessible",
          "command": "test -S /var/run/docker.sock && echo 'accessible'",
          "expected_pattern": "accessible",
          "severity": "critical",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "functionality_testing",
      "description": "Test Docker functionality",
      "checks": [
        {
          "name": "docker_version",
          "description": "Docker version check",
          "command": "docker --version",
          "expected_pattern": "Docker version",
          "severity": "critical",
          "validation_type": "output_pattern"
        },
        {
          "name": "docker_info",
          "description": "Docker system info",
          "command": "docker info",
          "expected_pattern": "Containers:",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "docker_test_container",
          "description": "Run test container",
          "command": "docker run --rm hello-world",
          "expected_pattern": "Hello from Docker",
          "test_mode": true,
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "permissions_verification",
      "description": "Verify Docker permissions and groups",
      "checks": [
        {
          "name": "docker_group",
          "description": "Docker group exists",
          "command": "getent group docker",
          "expected_pattern": "docker:",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "user_in_docker_group",
          "description": "Current user in docker group",
          "command": "groups $USER | grep -q docker && echo 'in_group'",
          "expected_pattern": "in_group",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "storage_verification",
      "description": "Verify Docker storage configuration",
      "checks": [
        {
          "name": "docker_storage",
          "description": "Docker storage driver",
          "command": "docker info | grep 'Storage Driver'",
          "expected_pattern": "Storage Driver:",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "docker_root_dir",
          "description": "Docker root directory exists",
          "command": "test -d /var/lib/docker && echo 'exists'",
          "expected_pattern": "exists",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    },
    {
      "name": "network_verification",
      "description": "Verify Docker networking",
      "checks": [
        {
          "name": "docker_networks",
          "description": "Docker networks list",
          "command": "docker network ls",
          "expected_pattern": "bridge",
          "severity": "informational",
          "validation_type": "output_pattern"
        },
        {
          "name": "docker_bridge_network",
          "description": "Bridge network exists",
          "command": "docker network inspect bridge",
          "expected_pattern": "bridge",
          "severity": "informational",
          "validation_type": "output_pattern"
        }
      ]
    }
  ],
  "services": [
    "docker"
  ],
  "filesystems": [
    "overlay2",
    "aufs",
    "devicemapper"
  ],
  "test_operations": {
    "container_test": {
      "command": "docker run --rm hello-world",
      "cleanup": "docker system prune -f",
      "description": "Test container functionality"
    },
    "image_test": {
      "command": "docker pull hello-world",
      "cleanup": "docker rmi hello-world",
      "description": "Test image pulling"
    }
  },
  "dependencies": {
    "required_commands": [
      "docker",
      "systemctl"
    ],
    "optional_commands": [
      "docker-compose",
      "docker-machine"
    ]
  },
  "post_verification": {
    "success_message": "Docker installation verified successfully",
    "failure_message": "Docker installation verification failed",
    "next_steps": [
      "Configure Docker Compose",
      "Set up Docker registry",
      "Configure container orchestration"
    ]
  }
}