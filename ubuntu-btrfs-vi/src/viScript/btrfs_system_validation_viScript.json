{
  "installation_type": "system_validation",
  "version": "2.0",
  "description": "Comprehensive System Validation for Ubuntu Installation Preparation (Generic + AI/ML)",
  "author": "Verified Installer Team",
  "created_date": "2023-12-18",
  "phases": [
    {
      "name": "environment_verification",
      "description": "Verify live boot environment and permissions",
      "checks": [
        {
          "name": "live_boot_detection",
          "description": "Verify running from live boot environment",
          "command": "df / | grep -q '^/dev/loop' && echo 'live_boot_detected'",
          "validation_type": "output_pattern",
          "expected_pattern": "live_boot_detected",
          "severity": "critical"
        },
        {
          "name": "ubuntu_version_check",
          "description": "Verify Ubuntu 24.04 LTS environment",
          "command": "lsb_release -d 2>/dev/null | grep -q 'Ubuntu 24.04' && echo 'ubuntu_24_04' || echo 'wrong_version'",
          "validation_type": "output_pattern",
          "expected_pattern": "ubuntu_24_04",
          "severity": "critical"
        },
        {
          "name": "live_environment_check",
          "description": "Verify live USB environment",
          "command": "[ -d /run/live ] && echo 'live_environment' || echo 'not_live'",
          "validation_type": "output_pattern",
          "expected_pattern": "live_environment",
          "severity": "informational"
        },
        {
          "name": "sudo_permissions",
          "description": "Check if running with sudo privileges",
          "command": "[ -n \"$SUDO_USER\" ] && echo 'sudo_active' || echo 'no_sudo'",
          "validation_type": "output_pattern",
          "expected_pattern": "sudo_active",
          "severity": "informational"
        },
        {
          "name": "home_directory_access",
          "description": "Verify home directory is accessible and writable",
          "command": "test -d $HOME && test -w $HOME && echo 'home_writable'",
          "validation_type": "output_pattern",
          "expected_pattern": "home_writable",
          "severity": "critical"
        }
      ]
    },
    {
      "name": "target_disk_validation",
      "description": "Validate target disk for installation",
      "checks": [
        {
          "name": "target_disk_detection",
          "description": "Detect and validate target disk",
          "command": "TARGET_DISK=\"/dev/nvme0n1\" && [ -b \"${TARGET_DISK}\" ] && echo 'target_disk_found' || echo 'target_disk_missing'",
          "validation_type": "output_pattern",
          "expected_pattern": "target_disk_found",
          "severity": "critical"
        },
        {
          "name": "disk_capacity_check",
          "description": "Verify disk capacity meets AI/ML requirements",
          "command": "TARGET_DISK=\"/dev/nvme0n1\" && DISK_SIZE_BYTES=$(lsblk -b -d -o SIZE ${TARGET_DISK} | tail -1) && DISK_SIZE_GB=$((DISK_SIZE_BYTES / 1024 / 1024 / 1024)) && if [ $DISK_SIZE_GB -ge 1400 ]; then echo 'sufficient_capacity'; else echo 'insufficient_capacity'; fi",
          "validation_type": "output_pattern",
          "expected_pattern": "sufficient_capacity",
          "severity": "critical"
        },
        {
          "name": "disk_model_info",
          "description": "Get disk model and capacity information",
          "command": "TARGET_DISK=\"/dev/nvme0n1\" && DISK_SIZE_BYTES=$(lsblk -b -d -o SIZE ${TARGET_DISK} | tail -1) && DISK_SIZE_GB=$((DISK_SIZE_BYTES / 1024 / 1024 / 1024)) && DISK_MODEL=$(lsblk -d -o MODEL ${TARGET_DISK} 2>/dev/null | tail -1 | xargs) && echo \"Model: ${DISK_MODEL}, Size: ${DISK_SIZE_GB}GB\"",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "existing_partitions_warning",
          "description": "Check for existing partitions on target disk",
          "command": "TARGET_DISK=\"/dev/nvme0n1\" && lsblk ${TARGET_DISK} 2>/dev/null | grep -q \"${TARGET_DISK}p\" && echo 'existing_partitions' || echo 'no_existing_partitions'",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "boot_environment_validation",
      "description": "Validate boot environment and UEFI support",
      "checks": [
        {
          "name": "uefi_mode_check",
          "description": "Verify UEFI boot mode",
          "command": "[ -d /sys/firmware/efi ] && echo 'uefi_mode' || echo 'legacy_mode'",
          "validation_type": "output_pattern",
          "expected_pattern": "uefi_mode",
          "severity": "critical"
        },
        {
          "name": "efi_variables_access",
          "description": "Check EFI variables accessibility",
          "command": "[ -d /sys/firmware/efi/efivars ] && echo 'efi_vars_accessible' || echo 'efi_vars_not_accessible'",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "filesystem_support_validation",
      "description": "Validate BTRFS and filesystem support",
      "checks": [
        {
          "name": "btrfs_kernel_support",
          "description": "Check BTRFS kernel module support",
          "command": "modprobe btrfs 2>/dev/null && echo 'btrfs_supported' || echo 'btrfs_not_supported'",
          "validation_type": "output_pattern",
          "expected_pattern": "btrfs_supported",
          "severity": "critical"
        },
        {
          "name": "btrfs_tools_check",
          "description": "Check BTRFS tools availability",
          "command": "which btrfs >/dev/null 2>&1 && btrfs --version 2>/dev/null | head -1 || echo 'BTRFS tools will be installed during installation'",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "system_information_collection",
      "description": "Collect and validate basic system information",
      "checks": [
        {
          "name": "kernel_info",
          "description": "Collect kernel and OS information",
          "command": "uname -a",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "distribution_info",
          "description": "Collect distribution release information",
          "command": "lsb_release -a",
          "validation_type": "output_pattern",
          "expected_pattern": "Ubuntu",
          "severity": "critical"
        },
        {
          "name": "system_uptime",
          "description": "Check system uptime",
          "command": "uptime",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "storage_analysis",
      "description": "Analyze storage devices and filesystems",
      "checks": [
        {
          "name": "disk_usage",
          "description": "Check disk usage with filesystem types",
          "command": "df -Th",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "block_devices",
          "description": "List all block devices with filesystem info",
          "command": "lsblk -f",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "disk_sizes_models",
          "description": "Get disk sizes, models and rotational status",
          "command": "lsblk -b -d -o NAME,MODEL,SIZE,ROTA",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "root_device_detection",
          "description": "Detect and analyze root device",
          "command": "ROOT_PART=$(df --output=source / | tail -1) && ROOT_DEV=$(echo \"$ROOT_PART\" | sed -E 's/(p?[0-9]+)$//') && lsblk -b -d -o NAME,SIZE,ROTA $ROOT_DEV",
          "validation_type": "none",
          "severity": "critical"
        }
      ]
    },
    {
      "name": "ai_ml_hardware_validation",
      "description": "Validate hardware for AI/ML workloads",
      "checks": [
        {
          "name": "memory_requirements_check",
          "description": "Verify memory meets AI/ML requirements",
          "command": "TOTAL_RAM_GB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}') && if [ $TOTAL_RAM_GB -ge 60 ]; then echo 'optimal_memory'; elif [ $TOTAL_RAM_GB -ge 30 ]; then echo 'adequate_memory'; else echo 'insufficient_memory'; fi",
          "validation_type": "output_pattern",
          "expected_pattern": "(optimal_memory|adequate_memory)",
          "severity": "critical"
        },
        {
          "name": "memory_details",
          "description": "Get detailed memory information",
          "command": "TOTAL_RAM_GB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}') && echo \"Detected RAM: ${TOTAL_RAM_GB}GB\"",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "nvidia_gpu_detection",
          "description": "Check for NVIDIA GPU (required for AI/ML)",
          "command": "lspci | grep -i nvidia >/dev/null 2>&1 && lspci | grep -i nvidia | head -1 | sed 's/.*: //' || echo 'No NVIDIA GPU detected'",
          "validation_type": "output_pattern",
          "expected_pattern": "(NVIDIA|No NVIDIA GPU detected)",
          "severity": "critical"
        },
        {
          "name": "cpu_information",
          "description": "Get extended CPU information",
          "command": "lscpu --all --extended",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "hardware_analysis",
      "description": "Analyze system hardware components",
      "checks": [
        {
          "name": "memory_usage",
          "description": "Check memory usage with totals",
          "command": "free -h -t",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "network_interfaces",
          "description": "List network interfaces briefly",
          "command": "ip -brief address",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "network_connectivity_validation",
      "description": "Validate network connectivity for installation",
      "checks": [
        {
          "name": "internet_connectivity",
          "description": "Check internet connectivity",
          "command": "ping -c 3 8.8.8.8 >/dev/null 2>&1 && echo 'internet_available' || echo 'no_internet'",
          "validation_type": "output_pattern",
          "expected_pattern": "internet_available",
          "severity": "critical"
        },
        {
          "name": "ubuntu_repository_access",
          "description": "Check Ubuntu repository accessibility",
          "command": "ping -c 2 archive.ubuntu.com >/dev/null 2>&1 && echo 'repositories_accessible' || echo 'repositories_unreachable'",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "system_proc_analysis",
      "description": "Analyze system information from /proc and /sys",
      "checks": [
        {
          "name": "memory_info_proc",
          "description": "Get memory information from /proc",
          "command": "cat /proc/meminfo",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "cpu_stats_proc",
          "description": "Get CPU statistics from /proc",
          "command": "cat /proc/stat | head -n5",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "disk_io_stats_proc",
          "description": "Get disk I/O statistics from /proc",
          "command": "cat /proc/diskstats | head -n20",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "network_interface_stats",
          "description": "Get per-interface byte counters from /sys",
          "command": "for IF in /sys/class/net/*; do NAME=$(basename \"$IF\"); echo \"$NAME RX:$(cat $IF/statistics/rx_bytes 2>/dev/null || echo 'N/A') TX:$(cat $IF/statistics/tx_bytes 2>/dev/null || echo 'N/A')\"; done",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "partition_layout_validation",
      "description": "Validate planned partition layout for AI/ML installation",
      "checks": [
        {
          "name": "partition_layout_summary",
          "description": "Generate partition layout summary",
          "command": "TARGET_DISK=\"/dev/nvme0n1\" && DISK_SIZE_BYTES=$(lsblk -b -d -o SIZE ${TARGET_DISK} | tail -1) && DISK_SIZE_GB=$((DISK_SIZE_BYTES / 1024 / 1024 / 1024)) && TOTAL_RAM_GB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}') && if [ $TOTAL_RAM_GB -ge 60 ]; then SWAP_SIZE=64GB; elif [ $TOTAL_RAM_GB -ge 30 ]; then SWAP_SIZE=32GB; else SWAP_SIZE=16GB; fi && if [ $DISK_SIZE_GB -ge 1800 ]; then DATA_SIZE=$((DISK_SIZE_GB - 770)); else DATA_SIZE=$((DISK_SIZE_GB - 500)); fi && echo \"EFI: 1GB, Swap: ${SWAP_SIZE}, Root: 200GB, ML: 500GB, Data: ~${DATA_SIZE}GB\"",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "output_validation",
      "description": "Validate system information output file",
      "checks": [
        {
          "name": "output_file_creation",
          "description": "Create system information output file",
          "command": "TS=$(date +%Y%m%d-%H%M%S) && OUT=\"$HOME/system-info-${TS}.txt\" && echo 'System validation output' > \"$OUT\" && echo \"$OUT\"",
          "validation_type": "output_pattern",
          "expected_pattern": "system-info-",
          "severity": "critical"
        },
        {
          "name": "output_file_permissions",
          "description": "Verify output file permissions and ownership",
          "command": "TS=$(date +%Y%m%d-%H%M%S) && OUT=\"$HOME/system-info-${TS}.txt\" && touch \"$OUT\" && ls -la \"$OUT\"",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "output_file_content",
          "description": "Verify output file contains system information",
          "command": "TS=$(date +%Y%m%d-%H%M%S) && OUT=\"$HOME/system-info-${TS}.txt\" && echo 'System validation test' > \"$OUT\" && wc -l \"$OUT\"",
          "validation_type": "output_pattern",
          "expected_pattern": "1",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "installation_readiness",
      "description": "Verify system is ready for Ubuntu installation",
      "checks": [
        {
          "name": "minimum_memory_check",
          "description": "Verify minimum memory requirements",
          "command": "free -m | grep '^Mem:' | awk '{if($2 >= 2048) print \"SUFFICIENT_MEMORY\"; else print \"INSUFFICIENT_MEMORY\"}'",
          "validation_type": "output_pattern",
          "expected_pattern": "SUFFICIENT_MEMORY",
          "severity": "critical"
        },
        {
          "name": "minimum_disk_space",
          "description": "Verify minimum disk space for installation",
          "command": "df / | tail -1 | awk '{if($4 >= 10485760) print \"SUFFICIENT_DISK\"; else print \"INSUFFICIENT_DISK\"}'",
          "validation_type": "output_pattern",
          "expected_pattern": "SUFFICIENT_DISK",
          "severity": "critical"
        },
        {
          "name": "network_connectivity",
          "description": "Check basic network connectivity",
          "command": "ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo 'network_ok' || echo 'network_failed'",
          "validation_type": "output_pattern",
          "expected_pattern": "network_ok",
          "severity": "informational"
        },
        {
          "name": "cpu_architecture",
          "description": "Verify CPU architecture compatibility",
          "command": "uname -m",
          "validation_type": "output_pattern",
          "expected_pattern": "(x86_64|amd64|aarch64)",
          "severity": "critical"
        }
      ]
    },
    {
      "name": "security_validation",
      "description": "Validate security and permission requirements",
      "checks": [
        {
          "name": "sudo_capabilities",
          "description": "Verify sudo capabilities for installation",
          "command": "sudo -n true 2>/dev/null && echo 'sudo_available' || echo 'sudo_unavailable'",
          "validation_type": "output_pattern",
          "expected_pattern": "sudo_available",
          "severity": "critical"
        },
        {
          "name": "user_permissions",
          "description": "Check user permissions and groups",
          "command": "id",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "secure_boot_status",
          "description": "Check Secure Boot status",
          "command": "mokutil --sb-state 2>/dev/null || echo 'Secure Boot status unknown'",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "hardware_specification_summary",
      "description": "Generate hardware specification summary matching prerequisites table",
      "checks": [
        {
          "name": "hardware_summary_table",
          "description": "Generate hardware specification summary table",
          "command": "echo '=== HARDWARE SPECIFICATION SUMMARY ===' && echo '' && echo '| Component | Detected | Minimum | Recommended | Status |' && echo '| --- | --- | --- | --- | --- |' && BOOT_MODE=$(if [ -d /sys/firmware/efi ]; then echo 'UEFI'; else echo 'BIOS/Legacy'; fi) && BOOT_STATUS=$(if [ -d /sys/firmware/efi ]; then echo 'PASS'; else echo 'FAIL'; fi) && echo \"| Boot Mode | $BOOT_MODE | UEFI | UEFI with Secure Boot | $BOOT_STATUS |\" && GPU_INFO=$(lspci | grep -i nvidia | head -1 | sed 's/.*: //' 2>/dev/null || echo 'No NVIDIA GPU') && GPU_STATUS=$(if echo \"$GPU_INFO\" | grep -q 'NVIDIA'; then echo 'PASS'; else echo 'FAIL'; fi) && echo \"| GPU | $GPU_INFO | NVIDIA GTX 1660 Ti | NVIDIA RTX 3080+ | $GPU_STATUS |\" && RAM_GB=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024/1024)}') && RAM_STATUS=$(if [ $RAM_GB -ge 30 ]; then echo 'PASS'; else echo 'FAIL'; fi) && echo \"| RAM | ${RAM_GB}GB | 32GB | 64GB+ | $RAM_STATUS |\" && DISK_SIZE_GB=$(lsblk -b -d -o SIZE /dev/nvme0n1 2>/dev/null | tail -1 | awk '{print int($1/1024/1024/1024)}') && DISK_STATUS=$(if [ $DISK_SIZE_GB -ge 1400 ]; then echo 'PASS'; else echo 'FAIL'; fi) && echo \"| Storage | ${DISK_SIZE_GB}GB | 1.5TB | 2TB+ | $DISK_STATUS |\" && NETWORK_SPEED=$(if ping -c 1 8.8.8.8 >/dev/null 2>&1; then echo 'Connected'; else echo 'No Connection'; fi) && NETWORK_STATUS=$(if ping -c 1 8.8.8.8 >/dev/null 2>&1; then echo 'PASS'; else echo 'FAIL'; fi) && echo \"| Network | $NETWORK_SPEED | 100Mbps | 1Gbps | $NETWORK_STATUS |\" && echo '' && echo '=== SUMMARY ===' && PASS_COUNT=$(echo -e \"$BOOT_STATUS\\n$GPU_STATUS\\n$RAM_STATUS\\n$DISK_STATUS\\n$NETWORK_STATUS\" | grep -c 'PASS') && TOTAL_COUNT=5 && echo \"Passed: $PASS_COUNT/$TOTAL_COUNT components\" && if [ $PASS_COUNT -eq $TOTAL_COUNT ]; then echo 'Status: SYSTEM READY'; else echo 'Status: SYSTEM NEEDS ATTENTION'; fi",
          "validation_type": "none",
          "severity": "informational"
        }
      ]
    },
    {
      "name": "final_validation",
      "description": "Final system validation summary",
      "checks": [
        {
          "name": "system_summary",
          "description": "Generate system validation summary",
          "command": "echo 'System validation completed' && echo 'Timestamp:' $(date) && echo 'Hostname:' $(hostname) && echo 'Architecture:' $(uname -m)",
          "validation_type": "none",
          "severity": "informational"
        },
        {
          "name": "installation_ready",
          "description": "Verify system is ready for Ubuntu installation",
          "command": "echo 'System validation passed - ready for Ubuntu installation'",
          "validation_type": "output_pattern",
          "expected_pattern": "ready for Ubuntu installation",
          "severity": "critical"
        }
      ]
    }
  ],
  "next_step": "btrfs_system_subvolume_creation_viScript.json"
}